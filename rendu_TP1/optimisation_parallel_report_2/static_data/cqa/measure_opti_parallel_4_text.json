{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_cvt_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mac/rendu_AOC/rendu_TP1/driver_opti.c:42",
                "/home/mac/rendu_AOC/rendu_TP1/driver_opti.c:42",
                "/home/mac/rendu_AOC/rendu_TP1/driver_opti.c:42",
                "/home/mac/rendu_AOC/rendu_TP1/driver_opti.c:42",
                "/home/mac/rendu_AOC/rendu_TP1/driver_opti.c:42",
                "/home/mac/rendu_AOC/rendu_TP1/driver_opti.c:42",
                "/home/mac/rendu_AOC/rendu_TP1/driver_opti.c:42",
                "/home/mac/rendu_AOC/rendu_TP1/driver_opti.c:42"
                ],
              "header": ""
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_call_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mac/rendu_AOC/rendu_TP1/driver_opti.c:42",
                "/home/mac/rendu_AOC/rendu_TP1/driver_opti.c:42",
                "/home/mac/rendu_AOC/rendu_TP1/driver_opti.c:42",
                "/home/mac/rendu_AOC/rendu_TP1/driver_opti.c:42",
                "/home/mac/rendu_AOC/rendu_TP1/driver_opti.c:42",
                "/home/mac/rendu_AOC/rendu_TP1/driver_opti.c:42",
                "/home/mac/rendu_AOC/rendu_TP1/driver_opti.c:42",
                "/home/mac/rendu_AOC/rendu_TP1/driver_opti.c:42"
                ],
              "header": ""
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - rand@plt: 8 occurrences<<list_path_1_call_1>>\n",
                "title": "CALL instructions",
                "txt": "Detected function call instructions.\n"
              },
              {
                "workaround": "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements.",
                "details": " - VCVTSI2SD (INT32/64 to FP64, scalar): 8 occurrences<<list_path_1_cvt_1>>\n",
                "title": "Conversion instructions",
                "txt": "Detected expensive conversion instructions."
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "8 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n"
              },
              {
                "title": "Matching between your loop (in the source code) and the binary loop",
                "txt": "The binary loop is composed of 8 FP arithmetical operations:\n - 8: multiply\nThe binary loop is loading 64 bytes (8 double precision FP elements).\nThe binary loop is storing 64 bytes (8 double precision FP elements)."
              },
              {
                "title": "Arithmetic intensity",
                "txt": "Arithmetic intensity is 0.06 FP operations per loaded or stored byte."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 43\nnb uops            : 82\nloop length        : 235\nused x86 registers : 3\nused mmx registers : 0\nused xmm registers : 16\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n"
              },
              {
                "title": "Front-end",
                "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 13.67 cycles\nfront end            : 13.67 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | ALU0/BRU0 | ALU1  | ALU2  | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3\n-----------------------------------------------------------------------------------------------\nuops   | 12.50     | 12.50 | 12.50 | 12.50     | 8.00 | 8.00 | 8.00 | 4.00 | 4.00 | 8.00 | 8.00\ncycles | 12.50     | 12.50 | 12.50 | 12.50     | 8.00 | 8.00 | 8.00 | 4.00 | 4.00 | 8.00 | 8.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU, BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2: store address\n - FP0 (256 bits): VPU\n - FP1 (256 bits): VPU\n - FP2 (256 bits): VPU, FP store data\n - FP3 (256 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 8.00\nLongest recurrence chain latency (RecMII): 1.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 13.67\nDispatch  : 12.50\nData deps.: 1.00\nOverall L1: 13.67\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "INT\nall    : 0%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 33%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 100%\nINT+FP\nall     : 25%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 50%\n"
              },
              {
                "title": "Vector efficiency ratios",
                "txt": "INT\nall    : 12%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 12%\nFP\nall     : 33%\nload    : 25%\nstore   : 25%\nmul     : 25%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 50%\nINT+FP\nall     : 28%\nload    : 25%\nstore   : 25%\nmul     : 25%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 31%\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 13.67 cycles. At this rate:\n - 7% of peak load performance is reached (4.68 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 14% of peak store performance is reached (4.68 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 13.67 to 12.50 cycles (1.09x speedup).\n"
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the loop is: 141a\n\nInstruction                       | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2 | FP3 | Latency | Recip. throughput | Vectorization\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nCALL 10f0 <rand@plt>              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nVXORPD %XMM9,%XMM9,%XMM9          | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nADD $0x40,%R14                    | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nVCVTSI2SD %EAX,%XMM9,%XMM10       | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nVMULSD 0x1d94(%RIP),%XMM10,%XMM11 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM11,-0x40(%R14)         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nCALL 10f0 <rand@plt>              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nVXORPD %XMM12,%XMM12,%XMM12       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nVCVTSI2SD %EAX,%XMM12,%XMM13      | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nVMULSD 0x1d78(%RIP),%XMM13,%XMM14 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM14,-0x38(%R14)         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nCALL 10f0 <rand@plt>              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nVXORPD %XMM15,%XMM15,%XMM15       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nVCVTSI2SD %EAX,%XMM15,%XMM4       | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nVMULSD 0x1d5c(%RIP),%XMM4,%XMM2   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM2,-0x30(%R14)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nCALL 10f0 <rand@plt>              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nVXORPD %XMM0,%XMM0,%XMM0          | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nVCVTSI2SD %EAX,%XMM0,%XMM1        | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nVMULSD 0x1d41(%RIP),%XMM1,%XMM6   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM6,-0x28(%R14)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nCALL 10f0 <rand@plt>              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nVXORPD %XMM3,%XMM3,%XMM3          | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nVCVTSI2SD %EAX,%XMM3,%XMM5        | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nVMULSD 0x1d26(%RIP),%XMM5,%XMM7   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM7,-0x20(%R14)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nCALL 10f0 <rand@plt>              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nVXORPD %XMM8,%XMM8,%XMM8          | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nVCVTSI2SD %EAX,%XMM8,%XMM9        | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nVMULSD 0x1d0a(%RIP),%XMM9,%XMM10  | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM10,-0x18(%R14)         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nCALL 10f0 <rand@plt>              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nVXORPD %XMM11,%XMM11,%XMM11       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nVCVTSI2SD %EAX,%XMM11,%XMM12      | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nVMULSD 0x1cee(%RIP),%XMM12,%XMM13 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM13,-0x10(%R14)         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nCALL 10f0 <rand@plt>              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nVXORPD %XMM14,%XMM14,%XMM14       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nVCVTSI2SD %EAX,%XMM14,%XMM15      | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nVMULSD 0x1cd2(%RIP),%XMM15,%XMM4  | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM4,-0x8(%R14)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nCMP %R12,%R14                     | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nJNE 141a <main+0x31a>             | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\n"
              }
            ],
          "header":
            [
            "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
            "2% of peak computational performance is used (0.59 out of 24.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "title": "Code clean check",
                "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 13.67 to 8.00 cycles (1.71x speedup)."
              },
              {
                "workaround": " - Try another compiler or update/tune your current one\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                "details": "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your loop is probably not vectorized.\nOnly 28% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your loop, you can lower the cost of an iteration from 13.67 to 2.34 cycles (5.83x speedup)."
              },
              {
                "title": "Execution units bottlenecks",
                "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
              }
            ],
          "potential":
            [

            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - rand@plt: 8 occurrences<<list_path_1_call_1>>\n",
                  "title": "CALL instructions",
                  "txt": "Detected function call instructions.\n"
                },
                {
                  "workaround": "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements.",
                  "details": " - VCVTSI2SD (INT32/64 to FP64, scalar): 8 occurrences<<list_path_1_cvt_1>>\n",
                  "title": "Conversion instructions",
                  "txt": "Detected expensive conversion instructions."
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "8 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n"
                },
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop is composed of 8 FP arithmetical operations:\n - 8: multiply\nThe binary loop is loading 64 bytes (8 double precision FP elements).\nThe binary loop is storing 64 bytes (8 double precision FP elements)."
                },
                {
                  "title": "Arithmetic intensity",
                  "txt": "Arithmetic intensity is 0.06 FP operations per loaded or stored byte."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 43\nnb uops            : 82\nloop length        : 235\nused x86 registers : 3\nused mmx registers : 0\nused xmm registers : 16\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n"
                },
                {
                  "title": "Front-end",
                  "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 13.67 cycles\nfront end            : 13.67 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | ALU0/BRU0 | ALU1  | ALU2  | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3\n-----------------------------------------------------------------------------------------------\nuops   | 12.50     | 12.50 | 12.50 | 12.50     | 8.00 | 8.00 | 8.00 | 4.00 | 4.00 | 8.00 | 8.00\ncycles | 12.50     | 12.50 | 12.50 | 12.50     | 8.00 | 8.00 | 8.00 | 4.00 | 4.00 | 8.00 | 8.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU, BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2: store address\n - FP0 (256 bits): VPU\n - FP1 (256 bits): VPU\n - FP2 (256 bits): VPU, FP store data\n - FP3 (256 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 8.00\nLongest recurrence chain latency (RecMII): 1.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 13.67\nDispatch  : 12.50\nData deps.: 1.00\nOverall L1: 13.67\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "INT\nall    : 0%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 33%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 100%\nINT+FP\nall     : 25%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 50%\n"
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "INT\nall    : 12%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 12%\nFP\nall     : 33%\nload    : 25%\nstore   : 25%\nmul     : 25%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 50%\nINT+FP\nall     : 28%\nload    : 25%\nstore   : 25%\nmul     : 25%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 31%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 13.67 cycles. At this rate:\n - 7% of peak load performance is reached (4.68 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 14% of peak store performance is reached (4.68 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 13.67 to 12.50 cycles (1.09x speedup).\n"
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 141a\n\nInstruction                       | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2 | FP3 | Latency | Recip. throughput | Vectorization\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nCALL 10f0 <rand@plt>              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nVXORPD %XMM9,%XMM9,%XMM9          | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nADD $0x40,%R14                    | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nVCVTSI2SD %EAX,%XMM9,%XMM10       | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nVMULSD 0x1d94(%RIP),%XMM10,%XMM11 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM11,-0x40(%R14)         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nCALL 10f0 <rand@plt>              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nVXORPD %XMM12,%XMM12,%XMM12       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nVCVTSI2SD %EAX,%XMM12,%XMM13      | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nVMULSD 0x1d78(%RIP),%XMM13,%XMM14 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM14,-0x38(%R14)         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nCALL 10f0 <rand@plt>              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nVXORPD %XMM15,%XMM15,%XMM15       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nVCVTSI2SD %EAX,%XMM15,%XMM4       | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nVMULSD 0x1d5c(%RIP),%XMM4,%XMM2   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM2,-0x30(%R14)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nCALL 10f0 <rand@plt>              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nVXORPD %XMM0,%XMM0,%XMM0          | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nVCVTSI2SD %EAX,%XMM0,%XMM1        | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nVMULSD 0x1d41(%RIP),%XMM1,%XMM6   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM6,-0x28(%R14)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nCALL 10f0 <rand@plt>              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nVXORPD %XMM3,%XMM3,%XMM3          | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nVCVTSI2SD %EAX,%XMM3,%XMM5        | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nVMULSD 0x1d26(%RIP),%XMM5,%XMM7   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM7,-0x20(%R14)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nCALL 10f0 <rand@plt>              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nVXORPD %XMM8,%XMM8,%XMM8          | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nVCVTSI2SD %EAX,%XMM8,%XMM9        | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nVMULSD 0x1d0a(%RIP),%XMM9,%XMM10  | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM10,-0x18(%R14)         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nCALL 10f0 <rand@plt>              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nVXORPD %XMM11,%XMM11,%XMM11       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nVCVTSI2SD %EAX,%XMM11,%XMM12      | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nVMULSD 0x1cee(%RIP),%XMM12,%XMM13 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM13,-0x10(%R14)         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nCALL 10f0 <rand@plt>              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nVXORPD %XMM14,%XMM14,%XMM14       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nVCVTSI2SD %EAX,%XMM14,%XMM15      | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nVMULSD 0x1cd2(%RIP),%XMM15,%XMM4  | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (25.0%)\nVMOVSD %XMM4,-0x8(%R14)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1   | 0   | 1       | 1                 | scal (25.0%)\nCMP %R12,%R14                     | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nJNE 141a <main+0x31a>             | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\n"
                }
              ],
            "header":
              [
              "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
              "2% of peak computational performance is used (0.59 out of 24.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 13.67 to 8.00 cycles (1.71x speedup)."
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your loop is probably not vectorized.\nOnly 28% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your loop, you can lower the cost of an iteration from 13.67 to 2.34 cycles (5.83x speedup)."
                },
                {
                  "title": "Execution units bottlenecks",
                  "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
                }
              ],
            "potential":
              [

              ]
          }
        ],
      "common":
        {
          "header":
            [
            "The loop is defined in /home/mac/rendu_AOC/rendu_TP1/driver_opti.c:41-42.\n",
            "It is main loop of related source loop which is unrolled by 8 (including vectorization)."
            ],
          "nb_paths": 1
        }
    }
}
